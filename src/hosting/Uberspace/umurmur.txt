: umurmur auf Uberspace

::: updates

:::: 2015.08.12

umurmur hat sich natürlich weiterentwickelt und war so wie hier beschrieben nicht zu installieren. Ich habe die Anleitung neu verfasst, sodass sie für den Stand ef99834 auf git und für die getaggte Version 0.2.16a funktioniert. Im Zuge dessen habe ich sie auch so angepasst, dass umurmur auch polarssl statt OpenSSL nutzt.

:::: 2014.11.08

Ein paar Dinge haben sich geändert. Mittlerweile gibt es Version 0.2.15. Die konnte fertig gebaut aber auf Brechen nicht den in der Config festgelegten Port nutzen. Das ist weniger schlimm, da die Änderungen zu 0.2.14 marginal sind. Zumal können wir in 0.2.14 noch auf autotools (bäh) verzichten. 
0.2.14 verlangt aber nach einem etwas älteren protobuf-c als dem, das ihr nach der bisherigen Anleitung bekommen hättet. Ich habe jetzt alles so angepasst, dass ihr die exakten Versionen der Abhängigkeiten bekommt, mit denen ich auch Erfolg hatte. 

:::: #1

Wie mich Maximilian Berger freundlicherweise informierte, gibt murmur beim Start die verwendete openssl-Version aus. Nach dieser Info in der Log zu suchen war mir in der Eile wohl nicht in den Sinn gekommen. Die verwendete Version der neuesten statischen murmur-Version vor heartbleed-Bekanntmachung war 1.0.0l. Diese ist nicht betroffen. Sehr gute Nachricht also. Danke für den Hinweis. 

- - -

Nach heartbleed habe ich mich schnell aufgemacht alles betroffene, was ich so betreibe, wieder dicht zu machen. 
Dazu gehörten auch paar mumble-Server. Ein neues CA-signiertes Zertifikat habe ich mir sowieso schon geholt, und für andere Instanzen mit selbst-signiertem Zertifikat hätte es ja ein '-wipessl' getan. 
Woher aber wissen, ob die statische Version von http://mumble.info/snapshot/ nicht gegen ein betroffenes OpenSSL kompiliert wurde? Ich habe auf die Schnelle keine Informationen dazu gefunden (und wer mir sagen kann, wie ich im Stil von 'ldd /bin/...' sowas an statischen Binarys herausfinde oder ob das überhaupt geht, bekommt Kekse). 
Daher wollte ich mal eben ein murmurd selbst auf Uberspace kompilieren (denn die haben ihr OpenSSL ja rasch gefixt). Hat aber nicht mal eben so geklappt, und ich habe wirklich keinen Nerv mich in QT-Buildsysteme einzufuchsen. 
Zum Glück gibt es aber umurmur. Es ist kleiner und kommt mit weniger Ballast. 
So gehts: 
 
Zunächst brauchen wir paar Abhängigkeiten:

====
toast arm https://github.com/snscltt/libconfig/archive/master.zip
toast arm https://github.com/Kitware/CMake/archive/v3.3.0.zip
toast arm https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.bz2
toast arm https://github.com/protobuf-c/protobuf-c/releases/download/v1.1.1/protobuf-c-1.1.1.tar.gz
toast arm https://tls.mbed.org/download/polarssl-1.2.15-gpl.tgz
====

/Achtung: der Link zu den libconfig-Quellen weist auf einen Fork von mir. Hintergrund: Das Tarball auf der Homepage von hyperrealm (Autoren von libconfig) ist nur über http (also nicht https!) erreichbar und es gibt keine Checksums. Es gibt zwar ein Verzeichnis auf github [2], diesem fehlen aber ein paar Makefiles aus dem Tarball von der Homepage, weswegen es mit toast nicht kompilieren würde. Diese habe ich von dort in meinen Fork eingefügt, mehr habe ich nicht geändert./

Bereitet ein Verzeichnis für die Quellen vor:

====
mkdir $HOME/git
cd $HOME/git
====

Und holt sie euch:

====
git clone https://github.com/umurmur/umurmur
====

Wer den Stand des masters auf git kompilieren möchte, überspringt den nächsten Schritt. Wer die zuletzt getaggte stabile Version haben möchte, wechselt im git-Verzeichnes auf dieses:

====
cd $HOME/git/umurmur
git checkout tags/0.2.16a
====

Wir kopieren jetzt noch den Inhalt in ein Arbeitsverzeichnis, wo wir dann auch kompilieren:

====
mkdir $HOME/src
cd $HOME/src
cp -r $HOME/git/umurmur .
mkdir umurmur/build
cd umurmur/build
====

Jetzt kanns losgehen:

====
cmake ../
make
====

Kopiert die Binary an einen guten Platz:

====
mkdir $HOME/bin
cp umurmurd $HOME/bin/
====

Und macht euch an die Config:

====
mkdir $HOME/etc
cp ../umurmur.conf.example $HOME/etc/umurmur.conf
mkdir -p $HOME/var/umurmur/
mkdir -p $HOME/var/log/
====

In '$HOME/var/umurmur/' könnt ihr eure Zertifikate legen. 

Wenn ihr keines habt und keines von einer CA authority signiertes braucht, könnt ihr euch so eines selbst erstellen:

====
mkdir -p $HOME/var/ssl/umurmur
cd $HOME/var/ssl/umurmur
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -nodes -days 365
====

Diese Zeile trägt das selbstsignierte Zertifikat von eben in die config ein:

====
sed -e "s/\/etc\/umurmur\/cert\.crt/\/home\/$USER\/var\/ssl\/umurmur\/cert\.pem/" -e "s/\/etc\/umurmur\/key\.key/\/home\/$USER\/var\/ssl\/umurmur\/key\.pem/" -i $HOME/etc/umurmur.conf
====

Die Beispielconfig (die wir jetzt in $HOME/etc/umurmur.conf haben) ist gut erklärt. 
Diese Parameter solltet ihr aber entkommentieren und unbedingt ändern: 

====
bindport = PORT; # Zu erfragen beim Uberspace-Team
logfile = "/home/USER/var/log/umurmurd.log" # 'USER' mit eurem Usernamen ersetzen.'~' funktioniert hier nicht. Wenn wir das nicht setzen, nervt umurmur womöglich SYSLOG.
====

Dann erstellt ihr letztlich noch wie gewohnt [1] einen Dienst:

====
uberspace-setup-service umurmurd $HOME/bin/umurmurd
====

Diese Zeile ändert noch die exec-Zeile in der run des Dienstes etwas:

====
sed -e "s/\/home\/$USER\/bin\/umurmurd/\/home\/$USER\/bin\/umurmurd\ -d\ -r\ -c\ \/home\/$USER\/etc\/umurmur.conf/" -i $HOME/service/umurmurd/run
====

sodass sie dann so aussehen sollte:

====
exec /home/USER/bin/umurmurd -d -r -c /home/USER/etc/umurmur.conf 2>&amp;1
====

Neues, schlankes und sicheres murmur!


[1] https://wiki.uberspace.de/system:daemontools
[2] https://github.com/hyperrealm/libconfig
